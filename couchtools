#!/usr/local/bin/ruby
$:.unshift File.dirname(__FILE__)
require 'couch_tools'

ACTIONS = {
  :"save-design-doc" => :save_design_doc,
  :"get-resource" => :get_resource,
  :"get-dbs" => :get_dbs,
  :"delete-resource" => :delete_resource,
}

def usage_message
  name = File.basename(__FILE__)

  <<EOS
# #{name}
#
# Useful for assembing couchdb design documents
# @see http://books.couchdb.org/relax/design-documents/design-documents

Options: 

\t#{name} save-design-doc \\
\t\tpath=/path/on/fs \\
\t\turl=http://url.of.the/db/_design/doc

\t#{name} get-resource \\
\t\turl=http://url.of.the/resource

\t#{name} get-dbs \\
\t\thost=http://url.of.host

\t#{name} delete-resource \\
\t\t--force \\
\t\turl=http://url.of.the/resource

EOS
end

def parse_args(argv)
  ret = {}

  ret[:action] = argv[0] && argv[0].to_sym

  argv.each do |arg|
    k,v = arg.split(/[=:\s]/,2)
    ret[k.to_sym] = v || k
  end
  ret
end

def main
  args = parse_args(ARGV)

  if args[:"-h"] 
    puts usage_message
    exit
  end

  action = ACTIONS[args[:action]]
  
  unless action
    puts "Unknown action: %s"%args[:action] #"]
    puts usage_message
    exit
  end

  self.__send__(action, args)
end

def save_design_doc(args)
  d = CouchTools::DesignDocument.new(args[:path], args[:url])
  d.save

  d.to_json
end

def get_resource(args)
  d = CouchTools::Document.new(args[:url])
  d.to_json
end

def delete_resource(args)
  d = CouchTools::Document.new(args[:url])

  if !args[:"--force"]
    puts d.to_json
    print "\nDelete %s [y/n]? "%args[:url]
    str = STDIN.gets
    return unless str && str.match(/^y/i)
  end
  d.delete
end  

puts main
